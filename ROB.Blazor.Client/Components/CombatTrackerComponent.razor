@using ROB.Blazor.Client.ViewModels

<div class="combat-tracker">
    <h3>Combat Tracker</h3>
    <div class="combat-tracker-wrapper">
        <div class="container header">
            <div class="card">
                <div class="card-body grid-wrapper">
                    <div class="main-stats">
                        <span class="oi oi-eye stat-bar-tooltip" aria-hidden="true">
                            <span class="stat-bar-tooltiptext">Visibility</span>
                        </span>
                        <span class="stat-bar-tooltip">
                            Name
                            <span class="stat-bar-tooltiptext">Name and Description</span>
                        </span>
                        <span class="stat-bar-tooltip head-character-stat">
                            Rct
                            <span class="stat-bar-tooltiptext">Reaction</span>
                        </span>
                        <span class="stat-bar-tooltip head-character-stat">
                            HP
                            <span class="stat-bar-tooltiptext">Max Health</span>
                        </span>
                        <span class="stat-bar-tooltip head-character-stat">
                            Tmp
                            <span class="stat-bar-tooltiptext">Temporary Health</span>
                        </span>
                        <span class="stat-bar-tooltip head-character-stat">
                            Wnd
                            <span class="stat-bar-tooltiptext">Damage Taken</span>
                        </span>
                        <span></span><!-- faction -->
                        <span class="oi oi-target stat-bar-tooltip">
                            <span class="stat-bar-tooltiptext">Target Control</span>
                        </span><!-- target -->
                        <span class="oi oi-list stat-bar-tooltip">
                            <span class="stat-bar-tooltiptext">Attributes</span>
                        </span><!-- attributes -->
                        <span class="oi oi-eyedropper stat-bar-tooltip">
                            <span class="stat-bar-tooltiptext">Offense</span>
                        </span><!-- offense -->
                        <span class="oi oi-crop stat-bar-tooltip">
                            <span class="stat-bar-tooltiptext">Size and Reach</span>
                        </span><!-- size and reach -->
                        <span class="oi oi-pulse stat-bar-tooltip">
                            <span class="stat-bar-tooltiptext">Effects</span>
                        </span><!-- effects -->
                        <span class="oi oi-clipboard stat-bar-tooltip">
                            <span class="stat-bar-tooltiptext">Character Sheet</span>
                        </span><!-- open char sheet -->
                    </div>
                </div>
            </div>
        </div>
        <div class="container body">
            @foreach (CharacterViewModel character in Characters)
            {
                <CascadingValue Value="@character" Name="Character">
                    <CascadingValue Value="@_activeCharacter" Name="ActiveCharacter">
                        <CharacterComponent LogAction="LogAction" OpenCharacterSheet="OpenCharacterSheet" />
                    </CascadingValue>
                </CascadingValue>
            }
        </div>
        <div class="container footer">
            <button @onclick="NextTurn"><span class="oi oi-arrow-thick-right"></span> End Turn</button>
        </div>
    </div>

    <CharacterSheetComponent @ref="@_characterSheet" />
</div>
@code {
    private List<CharacterViewModel> Characters;
    private CharacterViewModel _activeCharacter;
    private List<WeaponViewModel> Weapons;
    private Random rand = new Random();
    private CharacterSheetComponent _characterSheet;

    [Parameter]
    public Action<string> LogAction { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Characters = new List<CharacterViewModel>();
        Weapons = new List<WeaponViewModel>();

        await Task.Delay(500);

        Characters.Add(new CharacterViewModel()
        {
            Id = 0,
            Name = "John the Doe-stroyer",
            Dem = "Human",
            Faction = ROB.Blazor.Shared.Models.Character.FactionType.Friendly,
            Gender = ROB.Blazor.Shared.Models.Character.GenderType.Male,
            PortraitURL = "https://us.123rf.com/450wm/lnino87/lnino871710/lnino87171000006/88046593-stock-vector-man-with-beard-and-cap.jpg?ver=6",

            Actions = new List<string>() { "Doe-stroy enemy", "Go to mancave" },
            Traits = new List<string>() { "Mediocre", "Always drunk" },
            Reactions = new List<string>() { "Belligerent" },
            Effects = new List<string>() { "Bloated" },

            Rct = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Rct", Name = "Reaction", Value = 4 },
            AR = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "AR", Name = "Armor Rating", Value = 6 },
            EVA = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "EVA", Name = "Evasion", Value = 4 },
            HP = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "HP", Name = "Health Points", Value = 10 },
            PDR = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "PDR", Name = "Penetration Defense Rating", Value = 3 },
            RM = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "RM", Name = "Reaction Modifier", Value = 0 },
            Tmp = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Tmp", Name = "Temporary Health", Value = 5 },
            Wnd = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Wnd", Name = "Wound", Value = 7 },

            Size = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Size", Name = "Size", Value = 10 },
            Reach = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Reach", Name = "Reach", Value = 5 }
        });

        Characters.Add(new CharacterViewModel()
        {
            Id = 1,
            Name = "John's wife",
            Dem = "Human",
            Faction = ROB.Blazor.Shared.Models.Character.FactionType.Hostile,
            Gender = ROB.Blazor.Shared.Models.Character.GenderType.Female,
            PortraitURL = @"https://media.istockphoto.com/vectors/female-warrior-vector-id503758620?k=6&m=503758620&s=612x612&w=0&h=Xe2ZS9Ik2t8hm1EPfY1laQfv1FjWr80cMJ7ZB_XMwGI=",

            Actions = new List<string>() { "Nag", "Ignore", "Overreact" },
            Traits = new List<string>() { "Pretty", "'Smart'", "Hysterical" },
            Reactions = new List<string>() { "Over-reactive" },
            Effects = new List<string>() { "Depressed" },

            Rct = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Rct", Name = "Reaction", Value = 7 },
            AR = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "AR", Name = "Armor Rating", Value = 6 },
            EVA = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "EVA", Name = "Evasion", Value = 4 },
            HP = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "HP", Name = "Health Points", Value = 10 },
            PDR = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "PDR", Name = "Penetration Defense Rating", Value = 3 },
            RM = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "RM", Name = "Reaction Modifier", Value = 0 },
            Tmp = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Tmp", Name = "Temporary Health", Value = 5 },
            Wnd = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Wnd", Name = "Wound", Value = 7 },

            Size = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Size", Name = "Size", Value = 6 },
            Reach = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Reach", Name = "Reach", Value = 10 }
        });

        Characters.Add(new CharacterViewModel()
        {
            Id = 2,
            Name = "John's mother",
            Dem = "Human",
            Faction = ROB.Blazor.Shared.Models.Character.FactionType.Neutral,
            Gender = ROB.Blazor.Shared.Models.Character.GenderType.Female,
            PortraitURL = "https://media.istockphoto.com/vectors/grandmother-smokes-tobacco-pipe-grandma-smoking-pipe-vector-id1162153675?k=6&m=1162153675&s=612x612&w=0&h=X1HulkLnUOBTbNvIzxw7KREvxbcPObxYprSmZDYR3oA=",

            Actions = new List<string>() { "Underreact", "Pray wrath upon enemies", "Light one up" },
            Traits = new List<string>() { "Overlooks accomplishments", "Smokey lungs" },
            Reactions = new List<string>() { "Unresponsive" },
            Effects = new List<string>() { "Oblivious", "Forgetting" },

            Rct = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Rct", Name = "Reaction", Value = 1 },
            AR = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "AR", Name = "Armor Rating", Value = 6 },
            EVA = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "EVA", Name = "Evasion", Value = 4 },
            HP = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "HP", Name = "Health Points", Value = 10 },
            PDR = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "PDR", Name = "Penetration Defense Rating", Value = 3 },
            RM = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "RM", Name = "Reaction Modifier", Value = 0 },
            Tmp = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Tmp", Name = "Temporary Health", Value = 5 },
            Wnd = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Wnd", Name = "Wound", Value = 7 },

            Size = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Size", Name = "Size", Value = 20 },
            Reach = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Reach", Name = "Reach", Value = 3 }
        });

        Characters.Add(new CharacterViewModel()
        {
            Id = 3,
            Name = "Bogusaurus Rex",
            Dem = "A dinosaur, obviously",
            Faction = ROB.Blazor.Shared.Models.Character.FactionType.Hostile,
            Gender = ROB.Blazor.Shared.Models.Character.GenderType.Unknown,
            PortraitURL = "https://thumbs.dreamstime.com/b/funny-cartoon-dinosaur-lizard-isolated-18954697.jpg",

            Actions = new List<string>() { "Chomp", "Haymaker", "Fail to blow fire" },
            Traits = new List<string>() { "Huge", "Thinks its a dragon", "Hungry" },
            Reactions = new List<string>() { "Barrell Roll" },
            Effects = new List<string>() { "Slowed" },

            Rct = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Rct", Name = "Reaction", Value = 2 },
            AR = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "AR", Name = "Armor Rating", Value = 9 },
            EVA = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "EVA", Name = "Evasion", Value = 2 },
            HP = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "HP", Name = "Health Points", Value = 25 },
            PDR = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "PDR", Name = "Penetration Defense Rating", Value = 1 },
            RM = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "RM", Name = "Reaction Modifier", Value = 1 },
            Tmp = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Tmp", Name = "Temporary Health", Value = 0 },
            Wnd = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Wnd", Name = "Wound", Value = 6 },

            Size = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Size", Name = "Size", Value = 40 },
            Reach = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Reach", Name = "Reach", Value = 10 }
        });

        Weapons.Add(new WeaponViewModel()
        {
            Id = 0,
            Name = "Swordhalla",
            EVA = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "EVA", Name = "Evasion", Value = 4 },
            DT = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "DT", Name = "Damage Type", Value = 2 },
            DV = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "DV", Name = "Damage Value", Value = 5 },
            PVR = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "PVR", Name = "Penetration Value Rating", Value = 2 },
            Rch = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "Rch", Name = "Reach", Value = 1 },
            RM = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "RM", Name = "Reaction Modifier", Value = 10 },
            THF = new ROB.Blazor.Shared.Models.Stat() { Abbreviation = "THF", Name = "To Hit Feat", Value = 4 }
        });

        foreach (CharacterViewModel character in Characters)
            character.ActionPerformed += OnActionPerformed;

        Characters = Characters.OrderByDescending(x => x.Rct.Value).ToList();
        _activeCharacter = Characters[0];
    }

    private void NextTurn()
    {
        LogAction?.Invoke($"{_activeCharacter.Name}'s turn has ended.");
        _activeCharacter.EndTurn();
        int charIndex = (Characters.IndexOf(_activeCharacter) + 1) % Characters.Count;
        _activeCharacter = Characters[charIndex];
        LogAction?.Invoke($"{_activeCharacter.Name}'s turn has begun.");
    }

    private void OnActionPerformed(CharacterViewModel source, CharacterViewModel target, string action)
    {
        int damage = rand.Next(0, 5);
        target.Wnd.Value += damage;
        LogAction?.Invoke($"{source.Name} performed {action} on {target.Name} for {damage}.");
        StateHasChanged();
    }

    private void OpenCharacterSheet(CharacterViewModel character)
    {
        _characterSheet.LoadCharacter(character);
    }
}
