@using ROB.Blazor.Shared.Interfaces.CombatTracker

<div class="combat-tracker-wrapper">
    <h3>Combat Tracker</h3>
    <div class="combat-tracker">
        <div class="header dark-bg grid-char-bar">
            <span class="oi oi-eye tooltip-handle" aria-hidden="true">
                <span class="tooltip-text">Visibility</span>
            </span>
            <span class="tooltip-handle">
                Name
                <span class="tooltip-text">Name and Description</span>
            </span>
            <span class="tooltip-handle">
                Rct
                <span class="tooltip-text">Reaction</span>
            </span>
            <span class="tooltip-handle">
                HP
                <span class="tooltip-text">Max Health</span>
            </span>
            <span class="tooltip-handle">
                Tmp
                <span class="tooltip-text">Temporary Health</span>
            </span>
            <span class="tooltip-handle">
                Wnd
                <span class="tooltip-text">Damage Taken</span>
            </span>
            <span class="tooltip-handle">
                Tf
                <span class="tooltip-text">Toxic Fortitude</span>
            </span>
            <span class="tooltip-handle">
                Pf
                <span class="tooltip-text">Psychic Fortitude</span>
            </span>
            <span></span><!-- faction -->
            <span class="oi oi-target tooltip-handle">
                <span class="tooltip-text">Target Control</span>
            </span><!-- target -->
            <span class="oi oi-list tooltip-handle">
                <span class="tooltip-text">Attributes</span>
            </span><!-- attributes -->
            <span class="oi oi-eyedropper tooltip-handle">
                <span class="tooltip-text">Offense</span>
            </span><!-- offense -->
            <span class="oi oi-pulse tooltip-handle">
                <span class="tooltip-text">Effects</span>
            </span><!-- effects -->
            <span class="oi oi-clipboard tooltip-handle">
                <span class="tooltip-text">Character Sheet</span>
            </span><!-- open char sheet -->
        </div>
        <div class="body">
            @if (_loaded)
            {
                <CascadingValue Value="@_activeCharacter" Name="ActiveCharacter">
                    @foreach (ICharacter character in _characters)
                    {
                        <CascadingValue Value="@character" Name="Character">
                            <CharacterComponent OpenCharacterSheet="OpenCharacterSheet" LogAction="OnLogEvent" />
                        </CascadingValue>
                    }
                </CascadingValue>
            }
        </div>
        <div class="footer dark-bg">
            <button @onclick="NextTurn"><span class="oi oi-arrow-thick-right"></span> End Turn</button>
        </div>
    </div>

</div>

<CharacterSheetComponent @ref="@_characterSheet" />

@code {
    [Parameter]
    public int GameId { get; set; }

    private List<ICharacter> _characters = new List<ICharacter>();
    private ICharacter _activeCharacter;
    private Random rand = new Random();
    private CharacterSheetComponent _characterSheet;
    private Action<string> OnLogEvent;
    private bool _loaded = false;

    private IConsole _console { get; set; }
    private IGamePackage _gamePackage { get; set; }

    public async Task LoadGame(IConsole console, IGamePackage package)
    {
        _console = console;
        OnLogEvent += ((message) => { _console.Log(message); });

        _console.Log("Loading game...");

        await Task.Delay(500);

        _characters = package.GetCharacters(GameId);

        foreach (ICharacter character in _characters)
            character.ActionPerformed += OnActionPerformed;

        _characters = _characters.OrderByDescending(x => x.Rct.Value).ToList();
        _activeCharacter = _characters[0];

        _console.Log("Loading complete");
        _loaded = true;
        StateHasChanged();
    }

    private void NextTurn()
    {
        _console.Log($"{_activeCharacter.Name}'s turn has ended.");
        _activeCharacter.EndTurn();
        int charIndex = (_characters.IndexOf(_activeCharacter) + 1) % _characters.Count;
        _activeCharacter = _characters[charIndex];
        _console.Log($"{_activeCharacter.Name}'s turn has begun.");
    }

    private void OnActionPerformed(ICharacter source, ICharacter target, string action)
    {
        int damage = rand.Next(0, 5);
        target.Wnd.Value += damage;
        _console.Log($"{source.Name} performed {action} on {target.Name} for {damage}.");
        StateHasChanged();
    }

    private void OpenCharacterSheet(ICharacter character)
    {
        _characterSheet.LoadCharacter(character);
    }
}
