@using ROB.Blazor.Client.ViewModels
@implements IDisposable

<div class="character-details transition-height-scale" style="@GetCollapsedState()">
    <span class="oi oi-target" style="color:@(Character.GetFactionColor(Hidden))"></span>
    <div class="list-wrapper">
        <CharacterListableItemComponent Title="Targets" ListedItems="@TargetNames()" Actionable="true" Icon="oi oi-x" ActionClicked="RemoveTarget" />
    </div>
</div>

@code {
    [CascadingParameter(Name = "Character")]
    protected CharacterViewModel Character { get; set; }

    [Parameter]
    public bool Hidden { get; set; }

    private string GetCollapsedState()
    {
        double itemScale = 2.5;
        int height = (int)Math.Round(3 + itemScale * Math.Max(TargetNames().Count, 1));
        if (Hidden)
            return "max-height: 0;";
        else
            return $"max-height: {height}rem;";
    }

    protected override async Task OnInitializedAsync()
    {
        Character.TargetListChanged += StateHasChanged;
    }

    public void Dispose()
    {
        Character.TargetListChanged -= StateHasChanged;
    }

    private List<string> TargetNames()
    {
        List<string> names = new List<string>();

        foreach (CharacterViewModel character in Character.Targets)
            names.Add(character.Name);

        return names;
    }

    private void RemoveTarget(string charName)
    {
        CharacterViewModel character = Character.Targets.Where(x => x.Name == charName).FirstOrDefault();
        Character.RemoveTarget(character);
        StateHasChanged();
    }
}
