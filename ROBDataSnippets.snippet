<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Many to Many Template Configuration</Title>
      <Author>Unskilled</Author>
      <Description>This is a the default many to many configuration</Description>
      <Shortcut>ROBDataManyToMany</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>Class1</ID>
          <ToolTip>the 1st link model class</ToolTip>
          <Default>Class1</Default>
        </Literal>
        <Literal>
          <ID>Class2</ID>
          <ToolTip>the 2nd link model class</ToolTip>
          <Default>Class2</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
        public class $Class1$_$Class2$_Link_Configuration : IEntityTypeConfiguration<$Class1$_$Class2$_Link>
        {
            public void Configure(EntityTypeBuilder<$Class1$_$Class2$_Link> builder)
            { 
              builder
                  .HasKey(link => new { link.$Class1$Id, link.$Class2$Id });

              builder
                  .HasOne(link => link.$Class1$)
                  .WithMany(classOne => classOne.$Class2$s)
                  .HasForeignKey(link => link.$Class1$Id)
                  .OnDelete(DeleteBehavior.Cascade);

              builder
                  .HasOne(link => link.$Class2$)
                  .WithMany(classTwo => classTwo.$Class1$s)
                  .HasForeignKey(link => link.$Class2$Id)
                  .OnDelete(DeleteBehavior.Cascade);
            }
        }
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>One to Many Template Configuration</Title>
      <Author>Unskilled</Author>
      <Description>This is the default one to many configuration. Note: Please place this configuration inside the "One" class not the "Many"</Description>
      <Shortcut>ROBDataOneToMany</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>ClassOne</ID>
          <ToolTip>the model class with one that has many of the other class</ToolTip>
          <Default>ClassOne</Default>
        </Literal>
        <Literal>
          <ID>ClassMany</ID>
          <ToolTip>the model class with many that has one of the other class</ToolTip>
          <Default>ClassMany</Default>
        </Literal>
        <Literal>
          <ID>defaultBehavior</ID>
          <ToolTip>What happens on deleting this relationship (default ClientSetNull)</ToolTip>
          <Default>ClientSetNull</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
        builder
            .HasMany(p => p.$ClassMany$s)
            .WithOne(c => c.$ClassOne$)
            .HasForeignKey(c => c.$ClassOne$Id)            
            .OnDelete(DeleteBehavior.$defaultBehavior$);
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Repository Template Configuration</Title>
      <Author>Unskilled</Author>
      <Description>This is the default repository configuration</Description>
      <Shortcut>ROBDataModelConfig</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>Class</ID>
          <ToolTip>the model class</ToolTip>
          <Default>Class</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
        public class $Class$Configuration : IEntityTypeConfiguration<$Class$Model>
        {
            public void Configure(EntityTypeBuilder<$Class$Model> builder)
            {
                builder
                    .HasKey(b => b.Id);

                builder
                    .Property(b => b.Id)
                    .UseIdentityColumn();
                    
            }
        }
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>DbSet Template Configuration</Title>
      <Author>Unskilled</Author>
      <Description>This is the default DbSet configuration</Description>
      <Shortcut>ROBDataAddDbSet</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>Class</ID>
          <ToolTip>the model class</ToolTip>
          <Default>Class</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
        public DbSet<$Class$Model> $Class$ { get; set; }
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Repo Template</Title>
      <Author>Unskilled</Author>
      <Description>This is the default repo template</Description>
      <Shortcut>ROBDataRepo</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>Class</ID>
          <ToolTip>the model class</ToolTip>
          <Default>Class</Default>
        </Literal>
        <Literal>
          <ID>Link</ID>
          <ToolTip>If this needs to derive from the BaseLinkRepository</ToolTip>
          <Default>Link</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
        public class $Class$Repository : Base$Link$Repository<$Class$Model>, I$Class$Repository
        {
            private RealmDbContext RealmDbContext { get { return Context as RealmDbContext; } }
            public $Class$Repository(RealmDbContext context) : base(context) { }
        }
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>

  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Unit Repo Template</Title>
      <Author>Unskilled</Author>
      <Description>This is the default unit repo template</Description>
      <Shortcut>ROBDataUnitRepo</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>Class</ID>
          <ToolTip>the model class</ToolTip>
          <Default>Class</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
        private $Class$Repository _$Class$Repository;
        public I$Class$Repository $Class$ => _$Class$Repository = _$Class$Repository ?? new $Class$Repository(context);
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>