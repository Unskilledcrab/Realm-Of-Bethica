// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ROBaspCore.Data;

namespace ROBaspCore.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191006015634_addingWeapons&Poisons")]
    partial class addingWeaponsPoisons
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ROBaspCore.Models.AttributeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AttributeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheetModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Agile")
                        .HasColumnType("int");

                    b.Property<int>("AgileModifier")
                        .HasColumnType("int");

                    b.Property<int>("Attractive")
                        .HasColumnType("int");

                    b.Property<int>("AttractiveModifier")
                        .HasColumnType("int");

                    b.Property<int>("Charismatic")
                        .HasColumnType("int");

                    b.Property<int>("CharismaticModifier")
                        .HasColumnType("int");

                    b.Property<int>("HeadStrongModifier")
                        .HasColumnType("int");

                    b.Property<int>("Headstrong")
                        .HasColumnType("int");

                    b.Property<int>("Knowledgeable")
                        .HasColumnType("int");

                    b.Property<int>("KnowledgeableModifier")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Precision")
                        .HasColumnType("int");

                    b.Property<int>("PrecisionModifier")
                        .HasColumnType("int");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("Robust")
                        .HasColumnType("int");

                    b.Property<int>("RobustModifier")
                        .HasColumnType("int");

                    b.Property<int>("Strong")
                        .HasColumnType("int");

                    b.Property<int>("StrongModifier")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("CharacterSheetModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_ChildSkill_Link", b =>
                {
                    b.Property<int?>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int?>("ChildSkillId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "ChildSkillId");

                    b.HasIndex("ChildSkillId");

                    b.ToTable("CharacterSheet_ChildSkill_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Item_Link", b =>
                {
                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("CharacterSheet_Item_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_ParentSkill_Link", b =>
                {
                    b.Property<int?>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentSkillId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "ParentSkillId");

                    b.HasIndex("ParentSkillId");

                    b.ToTable("CharacterSheet_ParentSkill_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Poison_Link", b =>
                {
                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int>("PoisonId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "PoisonId");

                    b.HasIndex("PoisonId");

                    b.ToTable("CharacterSheet_Poison_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Talent_Link", b =>
                {
                    b.Property<int?>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int?>("TalentId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "TalentId");

                    b.HasIndex("TalentId");

                    b.ToTable("CharacterSheet_Talent_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Technique_Link", b =>
                {
                    b.Property<int?>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int?>("TechniqueId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "TechniqueId");

                    b.HasIndex("TechniqueId");

                    b.ToTable("CharacterSheet_Technique_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Weapon_Link", b =>
                {
                    b.Property<int?>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "WeaponId");

                    b.HasIndex("WeaponId");

                    b.ToTable("CharacterSheet_Weapon_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.ChildSkillModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentSkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentSkillId");

                    b.ToTable("ChildSkillModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.DamageTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DamageTypeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.ItemCategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemCategoryModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.ItemModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ResellValue")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ItemModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.LanguageGroupTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LanguageGroupTypeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.LanguageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Written")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GroupTypeId");

                    b.ToTable("LanguageModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.ModifierModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalModifiers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AttributeToModifyId")
                        .HasColumnType("int");

                    b.Property<int?>("ChildSkillToModifyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EffectAllParentSkills")
                        .HasColumnType("bit");

                    b.Property<bool>("EffectAllTrainedParentSkills")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<int>("Modifier")
                        .HasColumnType("int");

                    b.Property<bool>("MultiplyByLevel")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentSkillToModifyId")
                        .HasColumnType("int");

                    b.Property<string>("StaticSkillSufix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaticSkillToModify")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeToModifyId");

                    b.HasIndex("ChildSkillToModifyId");

                    b.HasIndex("ParentSkillToModifyId");

                    b.ToTable("ModifierModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.Modifier_Race_Link", b =>
                {
                    b.Property<int>("ModifierId")
                        .HasColumnType("int");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.HasKey("ModifierId", "RaceId");

                    b.HasIndex("RaceId");

                    b.ToTable("Modifier_Race_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.Modifier_Technique_Link", b =>
                {
                    b.Property<int>("ModifierId")
                        .HasColumnType("int");

                    b.Property<int>("TechniqueId")
                        .HasColumnType("int");

                    b.HasKey("ModifierId", "TechniqueId");

                    b.HasIndex("TechniqueId");

                    b.ToTable("Modifier_Technique_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.ParentSkillModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FirstAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("MyProperty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SecondAttributeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstAttributeId");

                    b.HasIndex("SecondAttributeId");

                    b.ToTable("ParentSkillModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.PoisonClassModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PoisonClassModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.PoisonModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("ConstitutionDamage")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("TypeId");

                    b.ToTable("PoisonModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.PoisonTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PoisonTypeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PregenProfessionArchetypeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetype_ChildSkill_LinkModel", b =>
                {
                    b.Property<int?>("ChildSkillId")
                        .HasColumnType("int");

                    b.Property<int?>("PregenProfessionArchetypeId")
                        .HasColumnType("int");

                    b.HasKey("ChildSkillId", "PregenProfessionArchetypeId");

                    b.HasIndex("PregenProfessionArchetypeId");

                    b.ToTable("PregenProfessionArchetype_ChildSkill_LinkModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetype_ParentSkill_LinkModel", b =>
                {
                    b.Property<int?>("ParentSkillId")
                        .HasColumnType("int");

                    b.Property<int?>("PregenProfessionArchetypeId")
                        .HasColumnType("int");

                    b.HasKey("ParentSkillId", "PregenProfessionArchetypeId");

                    b.HasIndex("PregenProfessionArchetypeId");

                    b.ToTable("PregenProfessionArchetype_ParentSkill_LinkModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetype_Talent_LinkModel", b =>
                {
                    b.Property<int?>("TalentId")
                        .HasColumnType("int");

                    b.Property<int?>("PregenProfessionArchetypeId")
                        .HasColumnType("int");

                    b.HasKey("TalentId", "PregenProfessionArchetypeId");

                    b.HasIndex("PregenProfessionArchetypeId");

                    b.ToTable("PregenProfessionArchetype_Talent_LinkModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetype_Technique_LinkModel", b =>
                {
                    b.Property<int?>("TechniqueId")
                        .HasColumnType("int");

                    b.Property<int?>("PregenProfessionArchetypeId")
                        .HasColumnType("int");

                    b.HasKey("TechniqueId", "PregenProfessionArchetypeId");

                    b.HasIndex("PregenProfessionArchetypeId");

                    b.ToTable("PregenProfessionArchetype_Technique_LinkModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.RaceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionBrief")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FirstAttributeModifier")
                        .HasColumnType("int");

                    b.Property<int?>("FirstModifiedAttributeId")
                        .HasColumnType("int");

                    b.Property<string>("HeightInches")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LifeSpanYears")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Luck")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondAttributeModifier")
                        .HasColumnType("int");

                    b.Property<int?>("SecondModifiedAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Sprint")
                        .HasColumnType("int");

                    b.Property<int>("Tactical")
                        .HasColumnType("int");

                    b.Property<int>("Walk")
                        .HasColumnType("int");

                    b.Property<string>("WeightLBS")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FirstModifiedAttributeId");

                    b.HasIndex("SecondModifiedAttributeId");

                    b.ToTable("RaceModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.TalentGroupTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TalentGroupTypeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.TalentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Benefit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TalentGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TalentGroupId");

                    b.ToTable("TalentModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.TalentPrerequisiteLink", b =>
                {
                    b.Property<int?>("TalentId")
                        .HasColumnType("int");

                    b.Property<int?>("PrerequisiteId")
                        .HasColumnType("int");

                    b.HasKey("TalentId", "PrerequisiteId");

                    b.HasIndex("PrerequisiteId");

                    b.ToTable("TalentPrerequisiteLink");
                });

            modelBuilder.Entity("ROBaspCore.Models.TechniqueGroupTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechniqueGroupType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TechniqueGroupTypeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.TechniqueModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("DurationLengthType")
                        .HasColumnType("int");

                    b.Property<int>("MinimumLevelRequirement")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TechniqueGroupTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TechniqueName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TechniqueGroupTypeId");

                    b.ToTable("TechniqueModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.TechniquePrerequisiteLink", b =>
                {
                    b.Property<int?>("TechniqueModelId")
                        .HasColumnType("int");

                    b.Property<int?>("PrerequisiteId")
                        .HasColumnType("int");

                    b.HasKey("TechniqueModelId", "PrerequisiteId");

                    b.HasIndex("PrerequisiteId");

                    b.ToTable("TechniquePrerequisitesLink");
                });

            modelBuilder.Entity("ROBaspCore.Models.TechniqueTalentPrerequisiteLink", b =>
                {
                    b.Property<int?>("TalentId")
                        .HasColumnType("int");

                    b.Property<int?>("TechniqueId")
                        .HasColumnType("int");

                    b.HasKey("TalentId", "TechniqueId");

                    b.HasIndex("TechniqueId");

                    b.ToTable("TechniqueTalentPrerequisiteLinks");
                });

            modelBuilder.Entity("ROBaspCore.Models.WeaponModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<double>("DamageFactor")
                        .HasColumnType("float");

                    b.Property<int?>("DamageTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DamageValue")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Evasion")
                        .HasColumnType("int");

                    b.Property<int>("Handed")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PenetrationValue")
                        .HasColumnType("int");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<int>("RateOfAttack")
                        .HasColumnType("int");

                    b.Property<int>("ReactionModifier")
                        .HasColumnType("int");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DamageTypeId");

                    b.HasIndex("SizeId");

                    b.HasIndex("WeaponTypeId");

                    b.ToTable("WeaponModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.WeaponSizeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("DamageModifier")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Type")
                        .HasColumnType("float");

                    b.Property<double>("WeightModifier")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("WeaponSizeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.WeaponTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WeaponTypeModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheetModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.RaceModel", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_ChildSkill_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("ChildSkills")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.ChildSkillModel", "ChildSkill")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("ChildSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Item_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("Items")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.ItemModel", "Item")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_ParentSkill_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("ParentSkills")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.ParentSkillModel", "ParentSkill")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("ParentSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Poison_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("Poisons")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.PoisonModel", "Poison")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("PoisonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Talent_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("Talents")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TalentModel", "Talent")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("TalentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Technique_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("Techniques")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TechniqueModel", "Technique")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Weapon_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("Weapons")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.WeaponModel", "Weapon")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.ChildSkillModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.ParentSkillModel", "ParentSkill")
                        .WithMany("ChildSkills")
                        .HasForeignKey("ParentSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.ItemModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.ItemCategoryModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("ROBaspCore.Models.LanguageModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.LanguageGroupTypeModel", "GroupType")
                        .WithMany()
                        .HasForeignKey("GroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.ModifierModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.AttributeModel", "AttributeToModify")
                        .WithMany()
                        .HasForeignKey("AttributeToModifyId");

                    b.HasOne("ROBaspCore.Models.ChildSkillModel", "ChildSkillToModify")
                        .WithMany()
                        .HasForeignKey("ChildSkillToModifyId");

                    b.HasOne("ROBaspCore.Models.ParentSkillModel", "ParentSkillToModify")
                        .WithMany()
                        .HasForeignKey("ParentSkillToModifyId");
                });

            modelBuilder.Entity("ROBaspCore.Models.Modifier_Race_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.ModifierModel", "Modifier")
                        .WithMany("Races")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.RaceModel", "Race")
                        .WithMany("Modifiers")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.Modifier_Technique_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.ModifierModel", "Modifier")
                        .WithMany("Techniques")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TechniqueModel", "Technique")
                        .WithMany("Modifiers")
                        .HasForeignKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.ParentSkillModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.AttributeModel", "FirstAttribute")
                        .WithMany()
                        .HasForeignKey("FirstAttributeId");

                    b.HasOne("ROBaspCore.Models.AttributeModel", "SecondAttribute")
                        .WithMany()
                        .HasForeignKey("SecondAttributeId");
                });

            modelBuilder.Entity("ROBaspCore.Models.PoisonModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.PoisonClassModel", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("ROBaspCore.Models.PoisonTypeModel", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetype_ChildSkill_LinkModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.ChildSkillModel", "ChildSkill")
                        .WithMany("PregenProfessionArchetypeLink")
                        .HasForeignKey("ChildSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.PregenProfessionArchetypeModel", "PregenProfessionArchetype")
                        .WithMany("ChildSkills")
                        .HasForeignKey("PregenProfessionArchetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetype_ParentSkill_LinkModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.ParentSkillModel", "ParentSkill")
                        .WithMany("PregenProfessionArchetypeLink")
                        .HasForeignKey("ParentSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.PregenProfessionArchetypeModel", "PregenProfessionArchetype")
                        .WithMany("TrainedParentSkills")
                        .HasForeignKey("PregenProfessionArchetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetype_Talent_LinkModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.PregenProfessionArchetypeModel", "PregenProfessionArchetype")
                        .WithMany("Talents")
                        .HasForeignKey("PregenProfessionArchetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TalentModel", "Talent")
                        .WithMany("PregenProfessionArchetypeLink")
                        .HasForeignKey("TalentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetype_Technique_LinkModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.PregenProfessionArchetypeModel", "PregenProfessionArchetype")
                        .WithMany("Techniques")
                        .HasForeignKey("PregenProfessionArchetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TechniqueModel", "Technique")
                        .WithMany("PregenProfessionArchetypeLink")
                        .HasForeignKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.RaceModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.AttributeModel", "FirstModifiedAttribute")
                        .WithMany()
                        .HasForeignKey("FirstModifiedAttributeId");

                    b.HasOne("ROBaspCore.Models.AttributeModel", "SecondModifiedAttribute")
                        .WithMany()
                        .HasForeignKey("SecondModifiedAttributeId");
                });

            modelBuilder.Entity("ROBaspCore.Models.TalentModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.TalentGroupTypeModel", "TalentGroup")
                        .WithMany()
                        .HasForeignKey("TalentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.TalentPrerequisiteLink", b =>
                {
                    b.HasOne("ROBaspCore.Models.TalentModel", "Prerequisite")
                        .WithMany("TalentBases")
                        .HasForeignKey("PrerequisiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TalentModel", "Talent")
                        .WithMany("TalentPrerequisites")
                        .HasForeignKey("TalentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.TechniqueModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.TechniqueGroupTypeModel", "TechniqueGroupType")
                        .WithMany()
                        .HasForeignKey("TechniqueGroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.TechniquePrerequisiteLink", b =>
                {
                    b.HasOne("ROBaspCore.Models.TechniqueModel", "Prerequisite")
                        .WithMany("TechniqueBases")
                        .HasForeignKey("PrerequisiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TechniqueModel", "Technique")
                        .WithMany("TechniquePrerequisites")
                        .HasForeignKey("TechniqueModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.TechniqueTalentPrerequisiteLink", b =>
                {
                    b.HasOne("ROBaspCore.Models.TalentModel", "TalentPrerequisite")
                        .WithMany("TechniqueConnection")
                        .HasForeignKey("TalentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TechniqueModel", "Technique")
                        .WithMany("TalentPrerequisites")
                        .HasForeignKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.WeaponModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.DamageTypeModel", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId");

                    b.HasOne("ROBaspCore.Models.WeaponSizeModel", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.HasOne("ROBaspCore.Models.WeaponTypeModel", "WeaponType")
                        .WithMany()
                        .HasForeignKey("WeaponTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
