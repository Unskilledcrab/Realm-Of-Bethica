// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ROBaspCore.Data;

namespace ROBaspCore.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191024192700_fixingAndAddingMaxLength")]
    partial class fixingAndAddingMaxLength
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ROBaspCore.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Guild")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ROBaspCore.Models.ArcaneSphereModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArcaneValue")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ArcaneSphereModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.ArmorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArmorRestorationId")
                        .HasColumnType("int");

                    b.Property<int>("ArmorRestrictionId")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("DefenseRating")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<int>("PenetrationDefenseRating")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ArmorRestorationId");

                    b.HasIndex("ArmorRestrictionId");

                    b.ToTable("ArmorModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.ArmorRestorationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArmorStyle")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("DamageRatingRestoration")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RepairTimeHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ArmorRestorationModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.ArmorRestrictionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CastingPenalty")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EvasionPenalty")
                        .HasColumnType("int");

                    b.Property<int>("FeatValuePenalty")
                        .HasColumnType("int");

                    b.Property<int>("MovementPenalty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ArmorRestrictionModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.AttributeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AttributeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.BuildingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BuildingOwnerId")
                        .HasColumnType("int");

                    b.Property<int>("BuildingRatingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingOwnerId");

                    b.HasIndex("BuildingRatingId");

                    b.HasIndex("CreatorId");

                    b.ToTable("BuildingModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.BuildingRatingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rating")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("BuildingRatingModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.Building_Armor_Link", b =>
                {
                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("ArmorId")
                        .HasColumnType("int");

                    b.HasKey("BuildingId", "ArmorId");

                    b.HasIndex("ArmorId");

                    b.ToTable("Building_Armor_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.Building_Item_Link", b =>
                {
                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("BuildingId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("Building_Item_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.Building_Poison_Link", b =>
                {
                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("PoisonId")
                        .HasColumnType("int");

                    b.HasKey("BuildingId", "PoisonId");

                    b.HasIndex("PoisonId");

                    b.ToTable("Building_Poison_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.Building_Shield_Link", b =>
                {
                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("ShieldId")
                        .HasColumnType("int");

                    b.HasKey("BuildingId", "ShieldId");

                    b.HasIndex("ShieldId");

                    b.ToTable("Building_Shield_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.Building_Weapon_Link", b =>
                {
                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("BuildingId", "WeaponId");

                    b.HasIndex("WeaponId");

                    b.ToTable("Building_Weapon_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheetModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Agile")
                        .HasColumnType("int");

                    b.Property<int>("AgileModifier")
                        .HasColumnType("int");

                    b.Property<int>("Alignment")
                        .HasColumnType("int");

                    b.Property<bool>("AreAttributesPublic")
                        .HasColumnType("bit");

                    b.Property<int>("Attractive")
                        .HasColumnType("int");

                    b.Property<int>("AttractiveModifier")
                        .HasColumnType("int");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Backstory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Charismatic")
                        .HasColumnType("int");

                    b.Property<int>("CharismaticModifier")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EyeColor")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Faith")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("HairColor")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("Headstrong")
                        .HasColumnType("int");

                    b.Property<int>("HeadstrongModifier")
                        .HasColumnType("int");

                    b.Property<int>("HeightInches")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int>("Knowledgeable")
                        .HasColumnType("int");

                    b.Property<int>("KnowledgeableModifier")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Precision")
                        .HasColumnType("int");

                    b.Property<int>("PrecisionModifier")
                        .HasColumnType("int");

                    b.Property<string>("PrivateNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("Robust")
                        .HasColumnType("int");

                    b.Property<int>("RobustModifier")
                        .HasColumnType("int");

                    b.Property<string>("SkinColor")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("Strong")
                        .HasColumnType("int");

                    b.Property<int>("StrongModifier")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RaceId");

                    b.ToTable("CharacterSheetModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Armor_Link", b =>
                {
                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int>("ArmorId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "ArmorId");

                    b.HasIndex("ArmorId");

                    b.ToTable("CharacterSheet_Armor_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_ChildSkill_Link", b =>
                {
                    b.Property<int?>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int?>("ChildSkillId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "ChildSkillId");

                    b.HasIndex("ChildSkillId");

                    b.ToTable("CharacterSheet_ChildSkill_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Item_Link", b =>
                {
                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("CharacterSheet_Item_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_ParentSkill_Link", b =>
                {
                    b.Property<int?>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentSkillId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "ParentSkillId");

                    b.HasIndex("ParentSkillId");

                    b.ToTable("CharacterSheet_ParentSkill_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Poison_Link", b =>
                {
                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int>("PoisonId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "PoisonId");

                    b.HasIndex("PoisonId");

                    b.ToTable("CharacterSheet_Poison_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_QuestGroup_Link", b =>
                {
                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int>("QuestGroupId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "QuestGroupId");

                    b.HasIndex("QuestGroupId");

                    b.ToTable("CharacterSheet_QuestGroup_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Quest_Link", b =>
                {
                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "QuestId");

                    b.HasIndex("QuestId");

                    b.ToTable("CharacterSheet_Quest_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Shield_Link", b =>
                {
                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int>("ShieldId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "ShieldId");

                    b.HasIndex("ShieldId");

                    b.ToTable("CharacterSheet_Shield_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Spell_Link", b =>
                {
                    b.Property<int?>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int?>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "SpellId");

                    b.HasIndex("SpellId");

                    b.ToTable("CharacterSheet_Spell_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Talent_Link", b =>
                {
                    b.Property<int?>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int?>("TalentId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "TalentId");

                    b.HasIndex("TalentId");

                    b.ToTable("CharacterSheet_Talent_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Technique_Link", b =>
                {
                    b.Property<int?>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int?>("TechniqueId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "TechniqueId");

                    b.HasIndex("TechniqueId");

                    b.ToTable("CharacterSheet_Technique_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Weapon_Link", b =>
                {
                    b.Property<int?>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "WeaponId");

                    b.HasIndex("WeaponId");

                    b.ToTable("CharacterSheet_Weapon_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.ChildSkillModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ParentSkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentSkillId");

                    b.ToTable("ChildSkillModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.DamageTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("DamageTypeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.ItemCategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("ItemCategoryModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.ItemModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double>("ResellValue")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ItemModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.LanguageGroupTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageType")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("LanguageGroupTypeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.LanguageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<bool>("Written")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GroupTypeId");

                    b.ToTable("LanguageModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.ModifierModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalModifiers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AttributeToModifyId")
                        .HasColumnType("int");

                    b.Property<int?>("ChildSkillToModifyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EffectAllParentSkills")
                        .HasColumnType("bit");

                    b.Property<bool>("EffectAllTrainedParentSkills")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<int>("Modifier")
                        .HasColumnType("int");

                    b.Property<bool>("MultiplyByLevel")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentSkillToModifyId")
                        .HasColumnType("int");

                    b.Property<string>("StaticSkillSufix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaticSkillToModify")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeToModifyId");

                    b.HasIndex("ChildSkillToModifyId");

                    b.HasIndex("ParentSkillToModifyId");

                    b.ToTable("ModifierModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.Modifier_Race_Link", b =>
                {
                    b.Property<int>("ModifierId")
                        .HasColumnType("int");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.HasKey("ModifierId", "RaceId");

                    b.HasIndex("RaceId");

                    b.ToTable("Modifier_Race_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.Modifier_Technique_Link", b =>
                {
                    b.Property<int>("ModifierId")
                        .HasColumnType("int");

                    b.Property<int>("TechniqueId")
                        .HasColumnType("int");

                    b.HasKey("ModifierId", "TechniqueId");

                    b.HasIndex("TechniqueId");

                    b.ToTable("Modifier_Technique_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.ParentSkillModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FirstAttributeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<int?>("SecondAttributeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstAttributeId");

                    b.HasIndex("SecondAttributeId");

                    b.ToTable("ParentSkillModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.PermissionViewer_Building_Link", b =>
                {
                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BuildingId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("PermissionViewer_Building_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.PermissionViewer_CharacterSheet_Link", b =>
                {
                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CharacterSheetId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("PermissionViewer_CharacterSheet_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.PermissionViewer_QuestGroup_Link", b =>
                {
                    b.Property<int>("QuestGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestGroupId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("PermissionViewer_QuestGroup_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.PermissionViewer_Quest_Link", b =>
                {
                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("PermissionViewer_Quest_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.PermissionViewer_Town_Link", b =>
                {
                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TownId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("PermissionViewer_Town_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.PermissionViewer_World_Link", b =>
                {
                    b.Property<int>("WorldId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WorldId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("PermissionViewer_World_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.PoisonClassModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("PoisonClassModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.PoisonModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("ConstitutionDamage")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Effect")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("TypeId");

                    b.ToTable("PoisonModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.PoisonTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("PoisonTypeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PregenProfessionArchetypeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetype_ChildSkill_LinkModel", b =>
                {
                    b.Property<int?>("ChildSkillId")
                        .HasColumnType("int");

                    b.Property<int?>("PregenProfessionArchetypeId")
                        .HasColumnType("int");

                    b.HasKey("ChildSkillId", "PregenProfessionArchetypeId");

                    b.HasIndex("PregenProfessionArchetypeId");

                    b.ToTable("PregenProfessionArchetype_ChildSkill_LinkModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetype_ParentSkill_LinkModel", b =>
                {
                    b.Property<int?>("ParentSkillId")
                        .HasColumnType("int");

                    b.Property<int?>("PregenProfessionArchetypeId")
                        .HasColumnType("int");

                    b.HasKey("ParentSkillId", "PregenProfessionArchetypeId");

                    b.HasIndex("PregenProfessionArchetypeId");

                    b.ToTable("PregenProfessionArchetype_ParentSkill_LinkModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetype_Talent_LinkModel", b =>
                {
                    b.Property<int?>("TalentId")
                        .HasColumnType("int");

                    b.Property<int?>("PregenProfessionArchetypeId")
                        .HasColumnType("int");

                    b.HasKey("TalentId", "PregenProfessionArchetypeId");

                    b.HasIndex("PregenProfessionArchetypeId");

                    b.ToTable("PregenProfessionArchetype_Talent_LinkModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetype_Technique_LinkModel", b =>
                {
                    b.Property<int?>("TechniqueId")
                        .HasColumnType("int");

                    b.Property<int?>("PregenProfessionArchetypeId")
                        .HasColumnType("int");

                    b.HasKey("TechniqueId", "PregenProfessionArchetypeId");

                    b.HasIndex("PregenProfessionArchetypeId");

                    b.ToTable("PregenProfessionArchetype_Technique_LinkModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.QuestGroupModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Synopsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("QuestGroupModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.QuestModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DifficultyRatingId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("QuestGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Synopsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DifficultyRatingId");

                    b.HasIndex("QuestGroupId");

                    b.ToTable("QuestModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.QuestRatingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rating")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int>("SuggestedLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("QuestRatingModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.QuestTagModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("QuestTagModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.Quest_QuestTag_Link", b =>
                {
                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<int>("QuestTagId")
                        .HasColumnType("int");

                    b.HasKey("QuestId", "QuestTagId");

                    b.HasIndex("QuestTagId");

                    b.ToTable("Quest_QuestTag_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.RaceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionBrief")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("FirstAttributeModifier")
                        .HasColumnType("int");

                    b.Property<int?>("FirstModifiedAttributeId")
                        .HasColumnType("int");

                    b.Property<string>("HeightInches")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("LifeSpanYears")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<int>("Luck")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondAttributeModifier")
                        .HasColumnType("int");

                    b.Property<int?>("SecondModifiedAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Sprint")
                        .HasColumnType("int");

                    b.Property<int>("Tactical")
                        .HasColumnType("int");

                    b.Property<int>("Walk")
                        .HasColumnType("int");

                    b.Property<string>("WeightLBS")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("FirstModifiedAttributeId");

                    b.HasIndex("SecondModifiedAttributeId");

                    b.ToTable("RaceModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.SecondaryArcaneElementModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArcaneValue")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prerequisite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpellModelId")
                        .HasColumnType("int");

                    b.Property<int>("Tier")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpellModelId");

                    b.ToTable("SecondaryArcaneElementModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.ShieldModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("DefensePoints")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EvasionModifier")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<int>("PenetrationDefenseRating")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ShieldModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.SpellAreaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArcaneValue")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SpellAreaModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.SpellCastingTimeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArcaneValue")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SpellCastingTimeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.SpellDurationModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArcaneValue")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SpellDurationModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.SpellModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArcaneSphereId")
                        .HasColumnType("int");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<int>("CastingTimeId")
                        .HasColumnType("int");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationId")
                        .HasColumnType("int");

                    b.Property<int>("Movement")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RangeId")
                        .HasColumnType("int");

                    b.Property<int>("SaveId")
                        .HasColumnType("int");

                    b.Property<int>("SizeLimitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArcaneSphereId");

                    b.HasIndex("AreaId");

                    b.HasIndex("CastingTimeId");

                    b.HasIndex("DurationId");

                    b.HasIndex("RangeId");

                    b.HasIndex("SaveId");

                    b.HasIndex("SizeLimitId");

                    b.ToTable("SpellModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.SpellRangeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArcaneValue")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SpellRangeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.SpellSaveModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArcaneValue")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SpellSaveModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.SpellSizeLimitModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArcaneValue")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SpellSizeLimitModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.TalentGroupTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("TalentGroupTypeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.TalentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Benefit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("TalentGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TalentGroupId");

                    b.ToTable("TalentModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.TalentPrerequisiteLink", b =>
                {
                    b.Property<int?>("TalentId")
                        .HasColumnType("int");

                    b.Property<int?>("PrerequisiteId")
                        .HasColumnType("int");

                    b.HasKey("TalentId", "PrerequisiteId");

                    b.HasIndex("PrerequisiteId");

                    b.ToTable("TalentPrerequisiteLink");
                });

            modelBuilder.Entity("ROBaspCore.Models.TechniqueGroupTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechniqueGroupType")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("TechniqueGroupTypeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.TechniqueModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("DurationLengthType")
                        .HasColumnType("int");

                    b.Property<int>("MinimumLevelRequirement")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("TechniqueGroupTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TechniqueName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("TechniqueGroupTypeId");

                    b.ToTable("TechniqueModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.TechniquePrerequisiteLink", b =>
                {
                    b.Property<int?>("TechniqueModelId")
                        .HasColumnType("int");

                    b.Property<int?>("PrerequisiteId")
                        .HasColumnType("int");

                    b.HasKey("TechniqueModelId", "PrerequisiteId");

                    b.HasIndex("PrerequisiteId");

                    b.ToTable("TechniquePrerequisitesLink");
                });

            modelBuilder.Entity("ROBaspCore.Models.TechniqueTalentPrerequisiteLink", b =>
                {
                    b.Property<int?>("TalentId")
                        .HasColumnType("int");

                    b.Property<int?>("TechniqueId")
                        .HasColumnType("int");

                    b.HasKey("TalentId", "TechniqueId");

                    b.HasIndex("TechniqueId");

                    b.ToTable("TechniqueTalentPrerequisiteLinks");
                });

            modelBuilder.Entity("ROBaspCore.Models.TownModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("PicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("WorldId");

                    b.ToTable("TownModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.Town_Building_Link", b =>
                {
                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.HasKey("TownId", "BuildingId");

                    b.HasIndex("BuildingId");

                    b.ToTable("Town_Building_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.Town_NPC_Link", b =>
                {
                    b.Property<int>("CharacterSheetId")
                        .HasColumnType("int");

                    b.Property<int>("TownId")
                        .HasColumnType("int");

                    b.HasKey("CharacterSheetId", "TownId");

                    b.HasIndex("TownId");

                    b.ToTable("Town_NPC_Link");
                });

            modelBuilder.Entity("ROBaspCore.Models.WeaponModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<double>("DamageFactor")
                        .HasColumnType("float");

                    b.Property<int>("DamageTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DamageValue")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Evasion")
                        .HasColumnType("int");

                    b.Property<int>("Handed")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<int>("PenetrationValue")
                        .HasColumnType("int");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<int>("RateOfAttack")
                        .HasColumnType("int");

                    b.Property<int>("ReactionModifier")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DamageTypeId");

                    b.HasIndex("SizeId");

                    b.HasIndex("WeaponTypeId");

                    b.ToTable("WeaponModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.WeaponSizeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("DamageModifier")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<double>("Type")
                        .HasColumnType("float");

                    b.Property<double>("WeightModifier")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("WeaponSizeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.WeaponTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("WeaponTypeModel");
                });

            modelBuilder.Entity("ROBaspCore.Models.WorldModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("PicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("WorldModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ROBaspCore.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ROBaspCore.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ROBaspCore.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.ArmorModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.ArmorRestorationModel", "ArmorRestoration")
                        .WithMany()
                        .HasForeignKey("ArmorRestorationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.ArmorRestrictionModel", "ArmorRestriction")
                        .WithMany()
                        .HasForeignKey("ArmorRestrictionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.BuildingModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "BuildingOwner")
                        .WithMany()
                        .HasForeignKey("BuildingOwnerId");

                    b.HasOne("ROBaspCore.Models.BuildingRatingModel", "BuildingRating")
                        .WithMany()
                        .HasForeignKey("BuildingRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.ApplicationUser", "Creator")
                        .WithMany("CreatedBuildings")
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("ROBaspCore.Models.Building_Armor_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.ArmorModel", "Armor")
                        .WithMany("Buildings")
                        .HasForeignKey("ArmorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.BuildingModel", "Building")
                        .WithMany("Armors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.Building_Item_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.BuildingModel", "Building")
                        .WithMany("Items")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.ItemModel", "Item")
                        .WithMany("Buildings")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.Building_Poison_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.BuildingModel", "Building")
                        .WithMany("Poisons")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.PoisonModel", "Poison")
                        .WithMany("Buildings")
                        .HasForeignKey("PoisonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.Building_Shield_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.BuildingModel", "Building")
                        .WithMany("Shields")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.ShieldModel", "Shield")
                        .WithMany("Buildings")
                        .HasForeignKey("ShieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.Building_Weapon_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.BuildingModel", "Building")
                        .WithMany("Weapons")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.WeaponModel", "Weapon")
                        .WithMany("Buildings")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheetModel", b =>
                {
                    b.HasOne("ROBaspCore.ApplicationUser", "Creator")
                        .WithMany("CreatedCharacterSheets")
                        .HasForeignKey("CreatorId");

                    b.HasOne("ROBaspCore.Models.RaceModel", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId");
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Armor_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.ArmorModel", "Armor")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("ArmorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("Armors")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_ChildSkill_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("ChildSkills")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.ChildSkillModel", "ChildSkill")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("ChildSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Item_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("Items")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.ItemModel", "Item")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_ParentSkill_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("ParentSkills")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.ParentSkillModel", "ParentSkill")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("ParentSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Poison_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("Poisons")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.PoisonModel", "Poison")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("PoisonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_QuestGroup_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("QuestGroups")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.QuestGroupModel", "QuestGroup")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("QuestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Quest_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("Quests")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.QuestModel", "Quest")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Shield_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("Shields")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.ShieldModel", "Shield")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("ShieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Spell_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("Spells")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.SpellModel", "Spell")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Talent_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("Talents")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TalentModel", "Talent")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("TalentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Technique_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("Techniques")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TechniqueModel", "Technique")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.CharacterSheet_Weapon_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("Weapons")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.WeaponModel", "Weapon")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.ChildSkillModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.ParentSkillModel", "ParentSkill")
                        .WithMany("ChildSkills")
                        .HasForeignKey("ParentSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.ItemModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.ItemCategoryModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.LanguageModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.LanguageGroupTypeModel", "GroupType")
                        .WithMany()
                        .HasForeignKey("GroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.ModifierModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.AttributeModel", "AttributeToModify")
                        .WithMany()
                        .HasForeignKey("AttributeToModifyId");

                    b.HasOne("ROBaspCore.Models.ChildSkillModel", "ChildSkillToModify")
                        .WithMany()
                        .HasForeignKey("ChildSkillToModifyId");

                    b.HasOne("ROBaspCore.Models.ParentSkillModel", "ParentSkillToModify")
                        .WithMany()
                        .HasForeignKey("ParentSkillToModifyId");
                });

            modelBuilder.Entity("ROBaspCore.Models.Modifier_Race_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.ModifierModel", "Modifier")
                        .WithMany("Races")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.RaceModel", "Race")
                        .WithMany("Modifiers")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.Modifier_Technique_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.ModifierModel", "Modifier")
                        .WithMany("Techniques")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TechniqueModel", "Technique")
                        .WithMany("Modifiers")
                        .HasForeignKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.ParentSkillModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.AttributeModel", "FirstAttribute")
                        .WithMany()
                        .HasForeignKey("FirstAttributeId");

                    b.HasOne("ROBaspCore.Models.AttributeModel", "SecondAttribute")
                        .WithMany()
                        .HasForeignKey("SecondAttributeId");
                });

            modelBuilder.Entity("ROBaspCore.Models.PermissionViewer_Building_Link", b =>
                {
                    b.HasOne("ROBaspCore.ApplicationUser", "ApplicationUser")
                        .WithMany("ViewableBuildings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.BuildingModel", "Building")
                        .WithMany("PermissionViewers")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.PermissionViewer_CharacterSheet_Link", b =>
                {
                    b.HasOne("ROBaspCore.ApplicationUser", "ApplicationUser")
                        .WithMany("ViewableCharacterSheets")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("PermissionViewers")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.PermissionViewer_QuestGroup_Link", b =>
                {
                    b.HasOne("ROBaspCore.ApplicationUser", "ApplicationUser")
                        .WithMany("ViewableQuestGroups")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.QuestGroupModel", "QuestGroup")
                        .WithMany("PermissionViewers")
                        .HasForeignKey("QuestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.PermissionViewer_Quest_Link", b =>
                {
                    b.HasOne("ROBaspCore.ApplicationUser", "ApplicationUser")
                        .WithMany("ViewableQuests")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.QuestModel", "Quest")
                        .WithMany("PermissionViewers")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.PermissionViewer_Town_Link", b =>
                {
                    b.HasOne("ROBaspCore.ApplicationUser", "ApplicationUser")
                        .WithMany("ViewableTowns")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TownModel", "Town")
                        .WithMany("PermissionViewers")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.PermissionViewer_World_Link", b =>
                {
                    b.HasOne("ROBaspCore.ApplicationUser", "ApplicationUser")
                        .WithMany("ViewableWorlds")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.WorldModel", "World")
                        .WithMany("PermissionViewers")
                        .HasForeignKey("WorldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.PoisonModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.PoisonClassModel", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.PoisonTypeModel", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetype_ChildSkill_LinkModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.ChildSkillModel", "ChildSkill")
                        .WithMany("PregenProfessionArchetypeLink")
                        .HasForeignKey("ChildSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.PregenProfessionArchetypeModel", "PregenProfessionArchetype")
                        .WithMany("ChildSkills")
                        .HasForeignKey("PregenProfessionArchetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetype_ParentSkill_LinkModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.ParentSkillModel", "ParentSkill")
                        .WithMany("PregenProfessionArchetypeLink")
                        .HasForeignKey("ParentSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.PregenProfessionArchetypeModel", "PregenProfessionArchetype")
                        .WithMany("TrainedParentSkills")
                        .HasForeignKey("PregenProfessionArchetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetype_Talent_LinkModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.PregenProfessionArchetypeModel", "PregenProfessionArchetype")
                        .WithMany("Talents")
                        .HasForeignKey("PregenProfessionArchetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TalentModel", "Talent")
                        .WithMany("PregenProfessionArchetypeLink")
                        .HasForeignKey("TalentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.PregenProfessionArchetype_Technique_LinkModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.PregenProfessionArchetypeModel", "PregenProfessionArchetype")
                        .WithMany("Techniques")
                        .HasForeignKey("PregenProfessionArchetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TechniqueModel", "Technique")
                        .WithMany("PregenProfessionArchetypeLink")
                        .HasForeignKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.QuestGroupModel", b =>
                {
                    b.HasOne("ROBaspCore.ApplicationUser", "Creator")
                        .WithMany("CreatedQuestGroups")
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("ROBaspCore.Models.QuestModel", b =>
                {
                    b.HasOne("ROBaspCore.ApplicationUser", "Creator")
                        .WithMany("CreatedQuests")
                        .HasForeignKey("CreatorId");

                    b.HasOne("ROBaspCore.Models.QuestRatingModel", "DifficultyRating")
                        .WithMany("Quests")
                        .HasForeignKey("DifficultyRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.QuestGroupModel", "QuestGroup")
                        .WithMany("Quests")
                        .HasForeignKey("QuestGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.Quest_QuestTag_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.QuestModel", "Quest")
                        .WithMany("QuestTags")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.QuestTagModel", "QuestTag")
                        .WithMany("Quests")
                        .HasForeignKey("QuestTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.RaceModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.AttributeModel", "FirstModifiedAttribute")
                        .WithMany()
                        .HasForeignKey("FirstModifiedAttributeId");

                    b.HasOne("ROBaspCore.Models.AttributeModel", "SecondModifiedAttribute")
                        .WithMany()
                        .HasForeignKey("SecondModifiedAttributeId");
                });

            modelBuilder.Entity("ROBaspCore.Models.SecondaryArcaneElementModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.SpellModel", null)
                        .WithMany("SecondaryArcaneElement")
                        .HasForeignKey("SpellModelId");
                });

            modelBuilder.Entity("ROBaspCore.Models.SpellModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.ArcaneSphereModel", "ArcaneSphere")
                        .WithMany()
                        .HasForeignKey("ArcaneSphereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.SpellAreaModel", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.SpellCastingTimeModel", "CastingTime")
                        .WithMany()
                        .HasForeignKey("CastingTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.SpellDurationModel", "Duration")
                        .WithMany()
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.SpellRangeModel", "Range")
                        .WithMany()
                        .HasForeignKey("RangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.SpellSaveModel", "Save")
                        .WithMany()
                        .HasForeignKey("SaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.SpellSizeLimitModel", "SizeLimit")
                        .WithMany()
                        .HasForeignKey("SizeLimitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.TalentModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.TalentGroupTypeModel", "TalentGroup")
                        .WithMany()
                        .HasForeignKey("TalentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.TalentPrerequisiteLink", b =>
                {
                    b.HasOne("ROBaspCore.Models.TalentModel", "Prerequisite")
                        .WithMany("TalentBases")
                        .HasForeignKey("PrerequisiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TalentModel", "Talent")
                        .WithMany("TalentPrerequisites")
                        .HasForeignKey("TalentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.TechniqueModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.TechniqueGroupTypeModel", "TechniqueGroupType")
                        .WithMany()
                        .HasForeignKey("TechniqueGroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.TechniquePrerequisiteLink", b =>
                {
                    b.HasOne("ROBaspCore.Models.TechniqueModel", "Prerequisite")
                        .WithMany("TechniqueBases")
                        .HasForeignKey("PrerequisiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TechniqueModel", "Technique")
                        .WithMany("TechniquePrerequisites")
                        .HasForeignKey("TechniqueModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.TechniqueTalentPrerequisiteLink", b =>
                {
                    b.HasOne("ROBaspCore.Models.TalentModel", "TalentPrerequisite")
                        .WithMany("TechniqueConnection")
                        .HasForeignKey("TalentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TechniqueModel", "Technique")
                        .WithMany("TalentPrerequisites")
                        .HasForeignKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.TownModel", b =>
                {
                    b.HasOne("ROBaspCore.ApplicationUser", "Creator")
                        .WithMany("CreatedTowns")
                        .HasForeignKey("CreatorId");

                    b.HasOne("ROBaspCore.Models.WorldModel", "World")
                        .WithMany("Towns")
                        .HasForeignKey("WorldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.Town_Building_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.BuildingModel", "Building")
                        .WithMany("Towns")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TownModel", "Town")
                        .WithMany("Buildings")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.Town_NPC_Link", b =>
                {
                    b.HasOne("ROBaspCore.Models.CharacterSheetModel", "CharacterSheet")
                        .WithMany("NPCTowns")
                        .HasForeignKey("CharacterSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.TownModel", "Town")
                        .WithMany("NPCs")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.WeaponModel", b =>
                {
                    b.HasOne("ROBaspCore.Models.DamageTypeModel", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.WeaponSizeModel", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ROBaspCore.Models.WeaponTypeModel", "WeaponType")
                        .WithMany()
                        .HasForeignKey("WeaponTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ROBaspCore.Models.WorldModel", b =>
                {
                    b.HasOne("ROBaspCore.ApplicationUser", "Creator")
                        .WithMany("CreatedWorlds")
                        .HasForeignKey("CreatorId");
                });
#pragma warning restore 612, 618
        }
    }
}
